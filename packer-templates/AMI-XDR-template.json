{
    "builders": [
      {
        "type": "amazon-ebs",
        "region": "{{env `AWS_REGION`}}",
        "source_ami_filter": {
          "filters": {
            "name": "ubuntu/images/*/ubuntu-*-22.04-amd64-server-*",
            "root-device-type": "ebs",
            "virtualization-type": "hvm",
            "architecture": "amd64"
          },
          "owners": [
            "099720109477"
          ],
          "most_recent": true
        },
        "instance_type": "t2.micro",
        "ssh_username": "ubuntu",
        "ami_name": "xdr-agent-ubuntu-{{timestamp}}",
        "tags": {
          "Name": "XDR Agent Ubuntu AMI",
          "OS": "Ubuntu",
          "BuiltBy": "Packer"
        }
      }
    ],
    "provisioners": [
      {
        "type": "shell",
        "inline": [
          "#!/bin/bash",
          "set -e",
          "echo \"Installation de l'agent XDR...\"",
          "XDR_URL=\"${XDR_URL}\"",
          "DISTRIBUTION_ID=\"${DISTRIBUTION_ID}\"",
          "AUTH_ID=\"${AUTH_ID}\"",
          "AUTH_TOKEN=\"${AUTH_TOKEN}\"",
          "XDR_TAGS=\"${XDR_TAGS}\"",
          "HEALTHCHECK_URL=\"$XDR_URL/public_api/v1/healthcheck\"",
          "health_response=$(curl --silent --location \"$HEALTHCHECK_URL\" \\\n  --header \"Accept: application/json\" \\\n  --header \"x-xdr-auth-id: $AUTH_ID\" \\\n  --header \"Authorization: $AUTH_TOKEN\")",
          "health_status=$(echo \"$health_response\" | jq -r '.status')",
          "if [[ \"$health_status\" != \"available\" ]]; then",
          "  echo \"Erreur de vérification de l'API. Statut: $health_status\"",
          "  exit 1",
          "fi",
          "echo \"L'API est saine. Procédure de demande d'URL de distribution...\"",
          "API_URL=\"$XDR_URL/public_api/v1/distributions/get_dist_url\"",
          "PACKAGE_TYPE=\"sh\"",
          "response=$(curl --silent --location \"$API_URL\" \\\n  --header \"Accept: application/json\" \\\n  --header \"x-xdr-auth-id: $AUTH_ID\" \\\n  --header \"Authorization: $AUTH_TOKEN\" \\\n  --header \"Content-Type: application/json\" \\\n  --data '{\n    \"request_data\": {\n      \"distribution_id\": \"'$DISTRIBUTION_ID'\",\n      \"package_type\": \"'$PACKAGE_TYPE'\"\n    }\n  }')",
          "distribution_url=$(echo \"$response\" | jq -r '.reply.distribution_url')",
          "if [[ -z \"$distribution_url\" || \"$distribution_url\" == \"null\" ]]; then",
          "  echo \"Échec de la récupération de l'URL de distribution à partir de la réponse.\" ",
          "  exit 1",
          "fi",
          "echo \"URL de distribution: $distribution_url\"",
          "curl --silent --location --request POST \"$distribution_url\" \\\n  --header 'Accept: application/json' \\\n  --header \"x-xdr-auth-id: $AUTH_ID\" \\\n  --header \"Authorization: $AUTH_TOKEN\" \\\n  --output /tmp/XDR-Linux.tar.gz",
          "echo \"Le résultat a été enregistré dans /tmp/XDR-Linux.tar.gz\"",
          "cd /tmp",
          "mkdir xdr",
          "mv XDR-Linux.tar.gz xdr",
          "cd xdr",
          "tar -zxvf XDR-Linux.tar.gz",
          "sudo mkdir -p /etc/panw",
          "sudo cp cortex.conf /etc/panw/",
          "sudo chmod +x *.sh",
          "./cortex-*.sh -- --endpoint-tags $XDR_TAGS",
          "sleep 10",
          "sudo rm -rf /tmp/xdr",
          "echo \"Installation de l'agent XDR terminée.\" "
        ],
        "environment_vars": [
          "XDR_URL={{env `XDR_URL`}}",
          "DISTRIBUTION_ID={{env `DISTRIBUTION_ID`}}",
          "AUTH_ID={{env `AUTH_ID`}}",
          "AUTH_TOKEN={{env `AUTH_TOKEN`}}",
          "XDR_TAGS={{env `XDR_TAGS`}}"
        ]
      }
    ],
    "variables": {
      "aws_region": {
        "type": "string",
        "description": "Région AWS où l'AMI sera construite"
      },
      "xdr_url": {
        "type": "string",
        "description": "L'URL de l'API XDR"
      },
      "distribution_id": {
        "type": "string",
        "description": "L'ID de distribution XDR"
      },
      "auth_id": {
        "type": "string",
        "description": "L'ID d'authentification XDR"
      },
      "auth_token": {
        "type": "string",
        "description": "Le jeton d'authentification XDR"
      },
      "xdr_tags": {
        "type": "string",
        "description": "Les balises XDR"
      }
    }
  }